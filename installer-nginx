#!/bin/bash
set -e

PHP_VERSION="8.2"
LARAVEL_FOLDER="devnogosec"
LARAVEL_PATH="/var/www/$LARAVEL_FOLDER"
NGINXCTL_PATH="/usr/local/bin/nginxctl"
# Custom port variables
NGINX_HTTP_PORT=8000
NGINX_HTTPS_PORT=8443

echo "üõ†Ô∏è  Mencari dan menghentikan semua proses nginx..."
systemctl stop nginx && echo "‚úÖ Nginx hard stop : Semua proses nginx berhasil dihentikan." || echo "‚ÑπÔ∏è  Tidak ada proses nginx yang aktif."
systemctl stop php${PHP_VERSION}-fpm && echo "‚úÖ Php-fpm hard stop : Semua proses php${PHP_VERSION}-fpm berhasil dihentikan." || echo "‚ÑπÔ∏è  Tidak ada proses php${PHP_VERSION}-fpm yang aktif."


### STEP 0: CREATE nginxadmin USER IF NEEDED ###
echo "[+] Checking if user 'nginxadmin' exists..."
if ! id -u nginxadmin >/dev/null 2>&1; then
    echo "[+] Creating user nginxadmin..."
    useradd -m -s /bin/bash nginxadmin
    echo "nginxadmin ALL=(ALL) NOPASSWD:ALL" > /etc/sudoers.d/nginxadmin
    echo "nginxadmin:nginxadmin" | chpasswd
    echo "[‚úì] User nginxadmin created with default password: nginxadmin"
else
    echo "[‚úì] User nginxadmin already exists."
fi

### STEP 0.1: CHECK IF SERVICES ARE RUNNING AND STOP IF NECESSARY ###
echo "[+] Checking and stopping running services before proceeding..."
for svc in nginx php${PHP_VERSION}-fpm; do
    if systemctl is-active --quiet $svc; then
        echo "[!] Service '$svc' is running. Stopping it..."
        systemctl stop $svc
        echo "[‚úì] Stopped $svc."
    else
        echo "[‚úì] Service '$svc' is already stopped."
    fi
    echo "[+] Skipping manual kill for '$svc'."
done

### STEP 0.2: KILL ANY www-data PHP-FPM WORKERS ###
echo "[+] Checking for PHP-FPM processes running as www-data..."
if pgrep -u www-data php-fpm > /dev/null; then
    echo "[!] Killing php-fpm processes owned by www-data..."
    pkill -u www-data php-fpm && echo "[‚úì] Killed www-data php-fpm processes."
else
    echo "[‚úì] No php-fpm processes owned by www-data."
fi

### STEP 1: VALIDATE DEPENDENCIES ###
echo "[+] Validating required packages..."
REQUIRED_PKG=(nginx php${PHP_VERSION} php${PHP_VERSION}-fpm php${PHP_VERSION}-xdebug net-tools)
for pkg in "${REQUIRED_PKG[@]}"; do
    if ! dpkg -s "$pkg" &>/dev/null; then
        echo "[!] Package '$pkg' not found. Installing..."
        apt install -y "$pkg"
    else
        echo "[‚úì] $pkg is already installed."
    fi
    alias laravel-check='/usr/local/bin/laravel-check'
done

### STEP Additional 1 : CONFIGURE NGINX USER ###
echo "[+] Updating nginx.conf to use user nginxadmin..."
sed -i 's/^user .*/user nginxadmin;/' /etc/nginx/nginx.conf || echo 'user nginxadmin;' >> /etc/nginx/nginx.conf

### STEP Additional 1 : CONFIGURE NGINX PORT ###
echo "[+] Updating Nginx site config ports..."
NGINX_SITE_CONF="/etc/nginx/sites-available/$(ls /etc/nginx/sites-enabled/ | head -n 1)"
if [[ -f "$NGINX_SITE_CONF" ]]; then
  sed -i "/listen 80 default_server;/d" "$NGINX_SITE_CONF"
  sed -i "/listen \[::\]:80 default_server;/d" "$NGINX_SITE_CONF"
  sed -i "s/listen 80;/listen ${NGINX_HTTP_PORT};/" "$NGINX_SITE_CONF"
  sed -i "s/listen \[::\]:80;/listen [::]:${NGINX_HTTP_PORT};/" "$NGINX_SITE_CONF"
  sed -i "/listen 443 ssl default_server;/d" "$NGINX_SITE_CONF"
  sed -i "/listen \[::\]:443 ssl default_server;/d" "$NGINX_SITE_CONF"
  sed -i "s/listen 443 ssl;/listen ${NGINX_HTTPS_PORT} ssl;/" "$NGINX_SITE_CONF"
  sed -i "s/listen \[::\]:443 ssl;/listen [::]:${NGINX_HTTPS_PORT} ssl;/" "$NGINX_SITE_CONF"
  echo "\u2705 Ports updated in $NGINX_SITE_CONF"
else
  echo "\u274c Nginx site config not found."
fi

### STEP 2: CREATE nginxctl HELPER ###
echo "[+] Creating nginxctl helper..."
# Create nginxctl tool
cat <<'EOF' > "$NGINXCTL_PATH"
#!/bin/bash

# nginxctl v2.1 - API Development Helper with Emoji Boost ‚ú®

NGINX_USER="nginxadmin"
NGINX_GROUP="nginxadmin"

NGINX_BIN="/usr/sbin/nginx"
NGINX_PID="/run/nginx.pid"
NGINX_LOG="/var/log/nginx/error.log"
PID_FILE="$NGINX_PID"

LARAVEL_FOLDER="devnogosec"
LARAVEL_PATH="/var/www/$LARAVEL_FOLDER"
LARAVEL_LOG="$LARAVEL_PATH/storage/logs/laravel.log"
PHP_VERSION="8.2"
PHPFPM_SERVICE="php${PHP_VERSION}-fpm"
PHPFPM_ERROR_LOG="/var/log/php${PHP_VERSION}-fpm.log"

PORT_HTTP=8000
PORT_HTTPS=8443

function is_nginx_running() {
    pgrep -x nginx > /dev/null
    return $?
}

function check_ports() {
    echo "üîç Mengecek port $PORT_HTTP dan $PORT_HTTPS..."
    sudo ss -tuln | grep -E ":$PORT_HTTP|:$PORT_HTTPS" || echo "‚ÑπÔ∏è  Tidak ada proses yang menggunakan port $PORT_HTTP atau $PORT_HTTPS."
}

function fix_permissions() {
  read -rp "‚ùì Apakah ini proyek API atau WEB? (api/web): " project_type
  if [[ "$project_type" == "api" ]]; then
    echo "‚ÑπÔ∏è  Proyek API terdeteksi. Direktori bootstrap tidak perlu diubah."
    sudo chown -R "$NGINX_USER:$NGINX_GROUP" "$LARAVEL_PATH/storage"
  elif [[ "$project_type" == "web" ]]; then
    echo "üõ†Ô∏è  Memperbaiki permission storage & cache ke $NGINX_USER:$NGINX_GROUP untuk proyek WEB..."
    sudo chown -R "$NGINX_USER:$NGINX_GROUP" "$LARAVEL_PATH/storage" "$LARAVEL_PATH/bootstrap/cache"
  else
    echo "‚ùå Input tidak valid. Gunakan 'api' atau 'web'. Silakan ulangi kembali. Proses tidak dieksekusi."
    exit 1
  fi
}

function laravel_cache() {
    echo "üì¶ Menjalankan Laravel cache commands..."
    cd "$LARAVEL_PATH" || { echo "‚ùå Gagal masuk ke folder Laravel"; exit 1; }
    php artisan config:cache
    php artisan route:cache
    php artisan view:cache
    echo "üõ†Ô∏è  Rename modifier file karena sebelumnya dibuat oleh root..."
    fix_permissions
}

function check_laravel_log() {
    echo "üìÑ Log error Laravel (150 baris terakhir)"
    tail -n 150 "$LARAVEL_LOG"
}

function check_phpfpm_log() {
    echo "üìÑ Log error PHP-FPM (150 baris terakhir)"
    tail -n 150 "$PHPFPM_ERROR_LOG"
}

function php_fpm_start() {
    echo "üöÄ Memulai PHP-FPM..."
    sudo systemctl start $PHPFPM_SERVICE && echo "‚úÖ PHP-FPM berjalan."
}

function php_fpm_stop() {
    echo "üõë Menghentikan PHP-FPM..."
    sudo systemctl stop $PHPFPM_SERVICE && echo "‚úÖ PHP-FPM berhenti."
}

function php_fpm_restart() {
    echo "‚ôªÔ∏è  Me-restart PHP-FPM..."
    sudo systemctl restart $PHPFPM_SERVICE && echo "‚úÖ PHP-FPM berhasil di-restart."
}

function php_fpm_status() {
    echo "üëÄ Status PHP-FPM:"
    sudo systemctl status $PHPFPM_SERVICE --no-pager
}

case "$1" in
  start)
    if is_nginx_running; then
      echo "‚ö†Ô∏è  Nginx sudah berjalan."
    else
      echo "üöÄ Memulai Nginx..."
      check_ports
      sudo $NGINX_BIN
      sleep 1
      if is_nginx_running; then
        echo "‚úÖ Nginx berhasil dimulai."
      else
        echo "‚ùå Gagal memulai Nginx. Lihat log: $NGINX_LOG"
      fi
    fi
    ;;
  stop)
    echo "üõë Menghentikan Nginx..."
    if [ -f "$PID_FILE" ]; then
      PID=$(cat "$PID_FILE")
      if kill "$PID" 2>/dev/null; then
        echo "‚úÖ Nginx berhasil dihentikan."
      else
        echo "‚ö†Ô∏è  Gagal menghentikan proses PID $PID. Gunakan sudo atau periksa izin."
      fi
    else
       echo "‚ùå File PID tidak ditemukan di $PID_FILE"
       echo "üëÄ Cek manual: ps aux | grep nginx"
    fi
    ;;
  restart)
    $0 stop
    sleep 1
    $0 start
    ;;
  log)
    echo "üìÑ Menampilkan log error Nginx:"
    tail -f $NGINX_LOG
    ;;
  ports)
    check_ports
    ;;
  laravel-log)
    check_laravel_log
    ;;
  phpfpm-log)
    check_phpfpm_log
    ;;
  phpfpmstart)
    php_fpm_start
    laravel_cache
    ;;
  phpfpmstop)
    php_fpm_stop
    laravel_cache
    ;;
  phpfpmrestart)
    php_fpm_restart
    laravel_cache
    ;;
  phpfpmstatus)
    php_fpm_status
    ;;
  restarteperithing)
    $0 stop
    sleep 1
    $0 start
    php_fpm_restart
    laravel_cache
    ;;
  *)
    echo "üõ†Ô∏è  Gunakan: $0 {restarteperithing|start|stop|restart|log|ports|laravel-log|phpfpm-log|phpfpmstart|phpfpmstop|phpfpmrestart|phpfpmstatus}"
    ;;
esac
EOF

chmod +x "$NGINXCTL_PATH"
echo "‚úÖ nginxctl telah digenerate di $NGINXCTL_PATH"

### STEP 3: CREATE xdebug-check HELPER ###
echo "[+] Creating xdebug-check helper..."
cat > /usr/local/bin/xdebug-check <<EOF
#!/bin/bash

PHP_VERSION="${PHP_VERSION}"
SOCKET="/run/php/php\${PHP_VERSION}-fpm.sock"
XLOG="/var/log/xdebug/xdebug.log"

function check_socket() {
  echo "üîç PHP-FPM Socket: \$SOCKET"
  [[ -S "\$SOCKET" ]] && echo "‚úÖ PHP-FPM socket is active." || echo "‚ùå Socket not found."
}

function check_user() {
  echo -e "\nüîç Checking PHP-FPM process user:"
  ps aux | grep php-fpm | grep -v grep

  echo -e "\nüîç Verifying PHP-FPM pool user setting..."
  if grep -E "^user\s*=\s*nginxadmin" /etc/php/\${PHP_VERSION}/fpm/pool.d/www.conf; then
    echo "[‚úì] PHP-FPM pool user is set to nginxadmin."
  else
    echo "[!] PHP-FPM pool user is NOT nginxadmin."
  fi

  echo -e "\nüîç Checking Nginx master process user:"
  if grep -E "^user\s+nginxadmin;" /etc/nginx/nginx.conf; then
    echo "[‚úì] Nginx user is set to nginxadmin."
  else
    echo "[!] Nginx user is NOT nginxadmin."
  fi

  echo -e "\nüîç Checking config files for www-data reference..."
  grep -r "www-data" /etc/php/\${PHP_VERSION}/fpm/pool.d /etc/nginx/ /etc/php/\${PHP_VERSION}/fpm/conf.d 2>/dev/null && echo "[!] Warning: Some configs still refer to www-data." || echo "[‚úì] No references to www-data found."
}

function xdebug_config() {
  echo -e "\nüîç Xdebug ini loaded in PHP-FPM:"
  php-fpm\${PHP_VERSION} -i | grep -i xdebug | grep -v "setting removed"
}

function port_check() {
  echo -e "\nüîç Checking if port 9003 on host 127.0.0.1 is reachable..."
  nc -zv 127.0.0.1 9003 && echo "‚úÖ Debug port 9003 is reachable." || echo "‚ùå Debug port 9003 unreachable."
}

function tail_log() {
  echo -e "\nüìÑ Last 10 lines of Xdebug log:"
  tail -n 10 "\$XLOG"
}

check_socket
check_user
xdebug_config
port_check
tail_log

echo -e "\n‚úÖ Done."
EOF
chmod +x /usr/local/bin/xdebug-check

### STEP 4: CONFIGURE NGINX USER ###
echo "[+] Updating nginx.conf to use user nginxadmin..."
sed -i 's/^user .*/user nginxadmin;/' /etc/nginx/nginx.conf || echo 'user nginxadmin;' >> /etc/nginx/nginx.conf

### STEP 5: CONFIGURE PHP-FPM USER AND SOCKET ###
echo "[+] Updating PHP-FPM pool configuration..."
sed -i "s/^user = .*/user = nginxadmin/" /etc/php/${PHP_VERSION}/fpm/pool.d/www.conf
sed -i "s/^group = .*/group = nginxadmin/" /etc/php/${PHP_VERSION}/fpm/pool.d/www.conf

### STEP 6: FIX PERMISSIONS ###
echo "[+] Fixing permissions for Laravel and Xdebug log..."
mkdir -p /var/log/xdebug
chown -R nginxadmin:nginxadmin /var/log/xdebug

# Set ownership for each Laravel project directory under /var/www
for dir in /var/www/*; do
  if [ -d "$dir" ]; then
    echo "[+] Setting ownership for $dir to nginxadmin..."
    chown -R nginxadmin:nginxadmin "$dir"
  fi

done

### STEP 7: RESTART SERVICES ###
echo "[+] Restarting services..."
systemctl restart php${PHP_VERSION}-fpm
systemctl restart nginx

### STEP 8: VALIDATION ###
echo "[+] Running nginxctl and xdebug-check..."
nginxctl restart
xdebug-check

### STEP 9: DISPLAY CONFIG LOCATIONS ###
echo -e "\nüìÅ Konfigurasi utama yang digunakan:"
echo " - Nginx global config      : /etc/nginx/nginx.conf"
echo " - Nginx site config        : /etc/nginx/sites-available/\$(ls /etc/nginx/sites-enabled/ | head -n 1)"
echo " - PHP-FPM pool config      : /etc/php/${PHP_VERSION}/fpm/pool.d/www.conf"
echo " - Xdebug config (auto load): /etc/php/${PHP_VERSION}/fpm/conf.d/20-xdebug.ini"
echo " - Xdebug log               : /var/log/xdebug/xdebug.log"

echo -e "\nüì¶ Tools bantu:"
echo " - nginxctl        ‚Üí /usr/local/bin/nginxctl"
echo " - xdebug-check    ‚Üí /usr/local/bin/xdebug-check"
echo " - laravel-check   ‚Üí /usr/local/bin/laravel-check"
echo " - Laravel Alias   ‚Üí run 'source ~/.bashrc' lalu pakai: laravel-check"

echo -e "\n‚úÖ Semua konfigurasi siap digunakan dengan user 'nginxadmin'. (Password default: nginxadmin)"

echo -e "\nüöÄ Setup complete! You may now test your Laravel app with Xdebug + nginxadmin user."

### STEP 10: LARAVEL AUTOCONFIG CHECKER ###
echo "[+] Creating laravel-check helper..."
cat > /usr/local/bin/laravel-check <<EOF
#!/bin/bash

LARAVEL_PATH="/var/www/${LARAVEL_FOLDER}"

cd "\$LARAVEL_PATH" || { echo "Laravel folder not found at \$LARAVEL_PATH"; exit 1; }

echo "üîç Checking Laravel Autoconfig..."
[[ -f .env ]] && echo "‚úÖ .env file exists." || echo "‚ùå .env file missing!"
php artisan config:clear && php artisan config:cache && echo "‚úÖ config cached." || echo "‚ùå config cache failed."
php artisan storage:link && echo "‚úÖ storage link OK." || echo "‚ö†Ô∏è storage link failed."
[ -w storage ] && echo "‚úÖ storage is writable." || echo "‚ùå storage is not writable!"
[ -w bootstrap/cache ] && echo "‚úÖ bootstrap/cache is writable." || echo "‚ùå bootstrap/cache is not writable!"
php artisan key:generate --show || echo "‚ùå APP_KEY missing or invalid."
php artisan migrate:status || echo "‚ö†Ô∏è DB connection issue or no migrations."
echo "‚úÖ Done Laravel Auto Check."
EOF
chmod +x /usr/local/bin/laravel-check

# Register alias to ~/.bashrc
if ! grep -q 'alias laravel-check=' ~/.bashrc; then
    echo "alias laravel-check='/usr/local/bin/laravel-check'" >> ~/.bashrc
    echo "[+] Laravel alias registered. Run 'source ~/.bashrc' to activate it."
fi

echo "Check listening port"
sudo ss -tuln | grep 8000
sudo ss -tuln | grep 8443

### Final Script After Berjalan ###
nginxctl restarteperithing


