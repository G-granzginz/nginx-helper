#!/bin/bash
set -e

PHP_VERSION="8.2"

### STEP 0: CREATE nginxadmin USER IF NEEDED ###
echo "[+] Checking if user 'nginxadmin' exists..."
if ! id -u nginxadmin >/dev/null 2>&1; then
    echo "[+] Creating user nginxadmin..."
    useradd -m -s /bin/bash nginxadmin
    echo "nginxadmin ALL=(ALL) NOPASSWD:ALL" > /etc/sudoers.d/nginxadmin
    echo "nginxadmin:nginxadmin" | chpasswd
    echo "[‚úì] User nginxadmin created with default password."
else
    echo "[‚úì] User nginxadmin already exists."
fi

### STEP 0.1: CHECK IF SERVICES ARE RUNNING AND STOP IF NECESSARY ###
echo "[+] Checking and stopping running services before proceeding..."
for svc in nginx php${PHP_VERSION}-fpm; do
    if systemctl is-active --quiet $svc; then
        echo "[!] Service '$svc' is running. Stopping it..."
        systemctl stop $svc
        echo "[‚úì] Stopped $svc."
    else
        echo "[‚úì] Service '$svc' is already stopped."
    fi
    echo "[+] Skipping manual kill for '$svc'."
done

### STEP 0.2: KILL ANY www-data PHP-FPM WORKERS ###
echo "[+] Checking for PHP-FPM processes running as www-data..."
if pgrep -u www-data php-fpm > /dev/null; then
    echo "[!] Killing php-fpm processes owned by www-data..."
    pkill -u www-data php-fpm && echo "[‚úì] Killed www-data php-fpm processes."
else
    echo "[‚úì] No php-fpm processes owned by www-data."
fi

### STEP 1: VALIDATE DEPENDENCIES ###
echo "[+] Validating required packages..."
REQUIRED_PKG=(nginx php${PHP_VERSION} php${PHP_VERSION}-fpm php${PHP_VERSION}-xdebug net-tools)
for pkg in "${REQUIRED_PKG[@]}"; do
    if ! dpkg -s "$pkg" &>/dev/null; then
        echo "[!] Package '$pkg' not found. Installing..."
        apt install -y "$pkg"
    else
        echo "[‚úì] $pkg is already installed."
    fi
done

### STEP 2: CREATE nginxctl HELPER ###
echo "[+] Creating nginxctl helper..."
cat > /usr/local/bin/nginxctl <<'EOF'
#!/bin/bash
case "$1" in
  start) sudo systemctl start nginx ;;
  stop) sudo systemctl stop nginx ;;
  restart) sudo systemctl restart nginx ;;
  reload) sudo nginx -s reload ;;
  configtest) sudo nginx -t ;;
  *) echo "Usage: $0 {start|stop|restart|reload|configtest}" ;;
esac
EOF
chmod +x /usr/local/bin/nginxctl

### STEP 3: CREATE xdebug-check HELPER ###
echo "[+] Creating xdebug-check helper..."
cat > /usr/local/bin/xdebug-check <<EOF
#!/bin/bash

PHP_VERSION="${PHP_VERSION}"
SOCKET="/run/php/php\${PHP_VERSION}-fpm.sock"
XLOG="/var/log/xdebug/xdebug.log"

function check_socket() {
  echo "üîç PHP-FPM Socket: \$SOCKET"
  [[ -S "\$SOCKET" ]] && echo "‚úÖ PHP-FPM socket is active." || echo "‚ùå Socket not found."
}

function check_user() {
  echo -e "\nüîç Checking PHP-FPM process user:"
  ps aux | grep php-fpm | grep -v grep

  echo -e "\nüîç Verifying PHP-FPM pool user setting..."
  if grep -E "^user\s*=\s*nginxadmin" /etc/php/\${PHP_VERSION}/fpm/pool.d/www.conf; then
    echo "[‚úì] PHP-FPM pool user is set to nginxadmin."
  else
    echo "[!] PHP-FPM pool user is NOT nginxadmin."
  fi

  echo -e "\nüîç Checking Nginx master process user:"
  if grep -E "^user\s+nginxadmin;" /etc/nginx/nginx.conf; then
    echo "[‚úì] Nginx user is set to nginxadmin."
  else
    echo "[!] Nginx user is NOT nginxadmin."
  fi

  echo -e "\nüîç Checking config files for www-data reference..."
  grep -r "www-data" /etc/php/\${PHP_VERSION}/fpm/pool.d /etc/nginx/ /etc/php/\${PHP_VERSION}/fpm/conf.d 2>/dev/null && echo "[!] Warning: Some configs still refer to www-data." || echo "[‚úì] No references to www-data found."
}

function xdebug_config() {
  echo -e "\nüîç Xdebug ini loaded in PHP-FPM:"
  php-fpm\${PHP_VERSION} -i | grep -i xdebug | grep -v "setting removed"
}

function port_check() {
  echo -e "\nüîç Checking if port 9003 on host 127.0.0.1 is reachable..."
  nc -zv 127.0.0.1 9003 && echo "‚úÖ Debug port 9003 is reachable." || echo "‚ùå Debug port 9003 unreachable."
}

function tail_log() {
  echo -e "\nüìÑ Last 10 lines of Xdebug log:"
  tail -n 10 "\$XLOG"
}

check_socket
check_user
xdebug_config
port_check
tail_log

echo -e "\n‚úÖ Done."
EOF
chmod +x /usr/local/bin/xdebug-check

### STEP 4: CONFIGURE NGINX USER ###
echo "[+] Updating nginx.conf to use user nginxadmin..."
sed -i 's/^user .*/user nginxadmin;/' /etc/nginx/nginx.conf || echo 'user nginxadmin;' >> /etc/nginx/nginx.conf

### STEP 5: CONFIGURE PHP-FPM USER AND SOCKET ###
echo "[+] Updating PHP-FPM pool configuration..."
sed -i "s/^user = .*/user = nginxadmin/" /etc/php/${PHP_VERSION}/fpm/pool.d/www.conf
sed -i "s/^group = .*/group = nginxadmin/" /etc/php/${PHP_VERSION}/fpm/pool.d/www.conf

### STEP 6: FIX PERMISSIONS ###
echo "[+] Fixing permissions for Laravel and Xdebug log..."
mkdir -p /var/log/xdebug
chown -R nginxadmin:nginxadmin /var/log/xdebug

# Set ownership for each Laravel project directory under /var/www
for dir in /var/www/*; do
  if [ -d "$dir" ]; then
    echo "[+] Setting ownership for $dir to nginxadmin..."
    chown -R nginxadmin:nginxadmin "$dir"
  fi
  
done

### STEP 7: RESTART SERVICES ###
echo "[+] Restarting services..."
systemctl restart php${PHP_VERSION}-fpm
systemctl restart nginx

### STEP 8: VALIDATION ###
echo "[+] Running nginxctl and xdebug-check..."
nginxctl restart
xdebug-check

### STEP 9: DISPLAY CONFIG LOCATIONS ###
echo -e "\nüìÅ Konfigurasi utama yang digunakan:"
echo " - Nginx global config      : /etc/nginx/nginx.conf"
echo " - Nginx site config        : /etc/nginx/sites-available/$(ls /etc/nginx/sites-enabled/ | head -n 1)"
echo " - PHP-FPM pool config      : /etc/php/${PHP_VERSION}/fpm/pool.d/www.conf"
echo " - Xdebug config (auto load): /etc/php/${PHP_VERSION}/fpm/conf.d/20-xdebug.ini"
echo " - Xdebug log               : /var/log/xdebug/xdebug.log"

echo -e "\nüì¶ Tools bantu:"
echo " - nginxctl        ‚Üí /usr/local/bin/nginxctl"
echo " - xdebug-check    ‚Üí /usr/local/bin/xdebug-check"

echo -e "\n‚úÖ Semua konfigurasi siap digunakan dengan user 'nginxadmin'."

echo -e "\nüöÄ Setup complete! You may now test your Laravel app with Xdebug + nginxadmin user."
